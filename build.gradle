plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
}
group = 'org.example'
version = '1.0-SNAPSHOT'
repositories {
    mavenCentral()
    jcenter()
}
configurations {
    compileClasspath
    testCompile {
        extendsFrom testImplementation
    }
}
dependencies {
    testImplementation 'org.testng:testng:7.8.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.10.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'io.github.bonigarcia:webdrivermanager:5.3.2'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation('org.projectlombok:lombok:1.18.26')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    testImplementation('org.projectlombok:lombok:1.18.20')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.20')
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation group: 'io.qameta.allure', name: 'allure-gradle', version: '2.8.0'
    implementation('io.qameta.allure:allure-java-commons:2.23.0')
    implementation('io.qameta.allure:allure-testng:2.23.0')
    implementation 'org.aspectj:aspectjweaver:1.9.19'
}
test {
    useTestNG()
}
//task greet{
//    doLast{
//        print 'hello gradle'
//    }
//}
task runWebTests(type: Test) {
    outputs.upToDateWhen { false }
    useTestNG {
        useDefaultListeners true
        outputDirectory = file("$buildDir/web-reports")
        listeners << 'com.yourpackage.ScreenshotListener' // replace with your listener's package
    }
}
tasks.withType(Test).configureEach {
    systemProperties System.properties
}
allure {                      //configure our reports
    version = '2.13.2'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.13.2'
    reportDir = new File(project.projectDir as File, '/allure-report/ui')
    resultsDir = new File(project.projectDir as File, '/allure-report/results')
    //isClean()
    clean=true
}
task createReportDir(){
    doLast{
        def file=new File(project.projectDir as File,'/allure-report/ui')
        if(!file.exists()){
            file.mkdirs();
        }
    }
}
task saveHistory(type:Copy){
    from new File(project.projectDir as File,'/allure-report/ui/history')
    into new File(project.projectDir as File,'/allure-report/results/history')
}





















